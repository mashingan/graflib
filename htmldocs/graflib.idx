Graph	graflib.html#Graph	graflib: Graph	
Vertex	graflib.html#Vertex	graflib: Vertex	
Edge	graflib.html#Edge	graflib: Edge	
GraphRef	graflib.html#GraphRef	graflib: GraphRef	
label	graflib.html#label.t,untyped	graflib: label(v: untyped): untyped	
`==`	graflib.html#==,Edge,Edge	graflib: `==`(a, b: Edge): bool	
initEdge	graflib.html#initEdge,T,T	graflib: initEdge[T](n1, n2: T): Edge[T]	
isDirected	graflib.html#isDirected,Graph	graflib: isDirected(graph: Graph): bool	
contains	graflib.html#contains,Graph,Vertex	graflib: contains(graph: Graph; vertice: Vertex): bool	
contains	graflib.html#contains,Graph[T],Edge[T]	graflib: contains[T](graph: Graph[T]; edge: Edge[T]): bool	
contains	graflib.html#contains,Edge[T],Vertex[T]	graflib: contains[T](edge: Edge[T]; vertex: Vertex[T]): bool	
addVertices	graflib.html#addVertices,Graph[T],varargs[T]	graflib: addVertices[T](graph: var Graph[T]; vertices: varargs[T])	
addEdges	graflib.html#addEdges,Graph,varargs[Edge[T]]	graflib: addEdges[T](graph: var Graph; edges: varargs[Edge[T]])	
addEdges	graflib.html#addEdges,Graph,varargs[]	graflib: addEdges[T](graph: var Graph; edges: varargs[(T, T)])	
buildGraph	graflib.html#buildGraph,openArray[Vertex[T]],openArray[Edge[T]],bool,bool	graflib: buildGraph[T](vertices: openArray[Vertex[T]] = @[];\n              edges: openArray[Edge[T]] = @[]; directed: bool = false;\n              weighted: bool = false): Graph[T]	
neighbors	graflib.html#neighbors,Graph[T],T	graflib: neighbors[T](graph: Graph[T]; vertex: T): seq[T]	
`$`	graflib.html#$,Graph[T]	graflib: `$`[T](graph: Graph[T]): string	
`$`	graflib.html#$,Edge	graflib: `$`(edge: Edge): string	
indegree	graflib.html#indegree,Graph[T],T	graflib: indegree[T](graph: Graph[T]; vertex: T): int	
outdegree	graflib.html#outdegree,Graph[T],T	graflib: outdegree[T](graph: Graph[T]; vertex: T): int	
degree	graflib.html#degree,Graph,Vertex	graflib: degree(graph: Graph; vertex: Vertex): int	
buildDigraph	graflib.html#buildDigraph	graflib: buildDigraph[T](): Graph	
newGraph	graflib.html#newGraph	graflib: newGraph[T](): GraphRef[T]	
isConnected	graflib.html#isConnected,Graph[T]	graflib: isConnected[T](graph: Graph[T]): bool	
paths	graflib.html#paths,Graph[T],Vertex[T],Vertex[T]	graflib: paths[T](graph: Graph[T]; v1, v2: Vertex[T]): seq[seq[Vertex[T]]]	
shortestPath	graflib.html#shortestPath,Graph[T],T,T	graflib: shortestPath[T](graph: Graph[T]; v1, v2: T): seq[Vertex[T]]	
adjacencyMatrix	graflib.html#adjacencyMatrix,Graph[T]	graflib: adjacencyMatrix[T](graph: Graph[T]): seq[seq[int]]	
incidenceMatrix	graflib.html#incidenceMatrix,Graph	graflib: incidenceMatrix(graph: Graph): seq[seq[int]]	
deleteVertex	graflib.html#deleteVertex,Graph[T],Vertex[T]	graflib: deleteVertex[T](graph: var Graph[T]; vertex: Vertex[T]): bool	
deleteEdge	graflib.html#deleteEdge,Graph[T],Edge[T]	graflib: deleteEdge[T](graph: var Graph[T]; edge: Edge[T]): bool	
`&lt;`	graflib.html#<,PriorityNode[T,C],PriorityNode[T,C]	graflib: `&lt;`[T, C](p1, p2: PriorityNode[T, C]): bool	
a*	graflib.html#a*,Graph[T],T,T	graflib: a*[T, C](graph: var Graph[T]; start, goal: T): seq[Vertex[T]]	
Graflib	graflib.html#graflib	 Graflib	
Example	graflib.html#graflib-example	  Example	
